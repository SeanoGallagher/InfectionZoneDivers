//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input System/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""General"",
            ""id"": ""17d06cf8-54f8-42fb-b8ba-0396236a02cf"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""97f636ba-1710-4879-a28c-907361c2b83a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": ""Press(pressPoint=1.401298E-45)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Value"",
                    ""id"": ""d13409a2-4033-4cee-b548-a0b543f571ac"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Focus"",
                    ""type"": ""Value"",
                    ""id"": ""98d47da6-a3ab-4f86-a29d-9580ff5ab49e"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""4446ed24-8301-45b3-b31d-6a8fa1256d05"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Change"",
                    ""type"": ""Value"",
                    ""id"": ""ef3c5d5f-97aa-4dc3-8055-112299d343ab"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Value"",
                    ""id"": ""53812bd5-79eb-427e-8120-3488d068ed44"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Construct"",
                    ""type"": ""Value"",
                    ""id"": ""e1d3bd9e-04aa-4e9d-9fd6-271b8f961150"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UseItem"",
                    ""type"": ""Value"",
                    ""id"": ""40e8dd90-4ce4-42b2-8f92-4d5f4cb47e0e"",
                    ""expectedControlType"": ""Key"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard Movement"",
                    ""id"": ""3d053675-cece-4704-8d12-c77fd46ebacc"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""af1fb3b9-d566-4488-adf4-989fe8556030"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""910f9f30-f3b1-4ff4-81b7-765735f782e1"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e9b3043c-010a-405c-8ca4-9fd9fe6b44a2"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""6da5fa1f-649f-4dd9-9da0-2d4bf47ea362"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f45e653f-b24f-4f1c-9280-ce4308793faf"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""26dd810f-6ceb-4793-87ce-772c9bac8898"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Change"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7780594a-1f57-4b20-8946-4f9d465ab09d"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Change"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a063114d-062e-4a56-9d3a-2c7e2b4e3026"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e93d8ee-700e-473a-a196-262eb8e12471"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""241d735e-b5ba-4819-a917-da4f05c0b410"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Focus"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b790396f-4367-402c-89b9-e9a87d096b5d"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Construct"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""76a48a8b-77d1-42f3-82ee-0c77f3d4c634"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""UseItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ccd3a135-7953-417c-b281-29098fd92b38"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""UseItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e44df96e-d69e-469f-aaf2-00b75b803eaf"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""UseItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a02b81d2-e598-43cc-819e-af4e822e5480"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""UseItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GUI"",
            ""id"": ""2532fc0f-19dd-4b46-9549-6f06d844aac8"",
            ""actions"": [
                {
                    ""name"": ""Invent"",
                    ""type"": ""Button"",
                    ""id"": ""3ee42b4a-423e-4846-bb0c-c2473522f9f2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""fb0b22f1-f227-4ab8-acef-9657771117eb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Build"",
                    ""type"": ""Button"",
                    ""id"": ""b9ea62b7-176d-4455-895f-43396ba2f7d1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""a7311923-5877-4477-a463-3ffcdcad108a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""971c3326-c618-445c-ad53-e01a7cdf2db3"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Invent"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""89348234-a96e-4325-bfa2-80c0abf998fc"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d505bc9c-8150-463c-a3c3-c3331824bdcb"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Build"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ea0f438a-b315-4b42-ac67-fb72a7e75c5c"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Blueprint"",
            ""id"": ""b9acb4d8-3710-457d-9254-b98080440dd0"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""89e1654d-58b3-41e4-9a3a-4ea1c433532c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Place"",
                    ""type"": ""Button"",
                    ""id"": ""7a13afc0-4248-4387-ae51-7b2759eaf9e5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Button"",
                    ""id"": ""2cd61ee9-5719-43a6-ab19-344287ddae24"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Exit"",
                    ""type"": ""Button"",
                    ""id"": ""41dcd3ad-bce8-472d-9237-2518b0740d40"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3d80480b-fa72-4a7e-8f33-4630a7c71daa"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""33cfe850-a36f-4042-bfd0-061941185a7c"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Place"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4d96bbd9-e5ef-4ebf-944b-4e0944716390"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1220fe8b-007c-4388-8b83-d12e37bc0695"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": []
        }
    ]
}");
        // General
        m_General = asset.FindActionMap("General", throwIfNotFound: true);
        m_General_Move = m_General.FindAction("Move", throwIfNotFound: true);
        m_General_Run = m_General.FindAction("Run", throwIfNotFound: true);
        m_General_Focus = m_General.FindAction("Focus", throwIfNotFound: true);
        m_General_Reload = m_General.FindAction("Reload", throwIfNotFound: true);
        m_General_Change = m_General.FindAction("Change", throwIfNotFound: true);
        m_General_Fire = m_General.FindAction("Fire", throwIfNotFound: true);
        m_General_Construct = m_General.FindAction("Construct", throwIfNotFound: true);
        m_General_UseItem = m_General.FindAction("UseItem", throwIfNotFound: true);
        // GUI
        m_GUI = asset.FindActionMap("GUI", throwIfNotFound: true);
        m_GUI_Invent = m_GUI.FindAction("Invent", throwIfNotFound: true);
        m_GUI_Pause = m_GUI.FindAction("Pause", throwIfNotFound: true);
        m_GUI_Build = m_GUI.FindAction("Build", throwIfNotFound: true);
        m_GUI_Interact = m_GUI.FindAction("Interact", throwIfNotFound: true);
        // Blueprint
        m_Blueprint = asset.FindActionMap("Blueprint", throwIfNotFound: true);
        m_Blueprint_Move = m_Blueprint.FindAction("Move", throwIfNotFound: true);
        m_Blueprint_Place = m_Blueprint.FindAction("Place", throwIfNotFound: true);
        m_Blueprint_Rotate = m_Blueprint.FindAction("Rotate", throwIfNotFound: true);
        m_Blueprint_Exit = m_Blueprint.FindAction("Exit", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // General
    private readonly InputActionMap m_General;
    private IGeneralActions m_GeneralActionsCallbackInterface;
    private readonly InputAction m_General_Move;
    private readonly InputAction m_General_Run;
    private readonly InputAction m_General_Focus;
    private readonly InputAction m_General_Reload;
    private readonly InputAction m_General_Change;
    private readonly InputAction m_General_Fire;
    private readonly InputAction m_General_Construct;
    private readonly InputAction m_General_UseItem;
    public struct GeneralActions
    {
        private @PlayerInputActions m_Wrapper;
        public GeneralActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_General_Move;
        public InputAction @Run => m_Wrapper.m_General_Run;
        public InputAction @Focus => m_Wrapper.m_General_Focus;
        public InputAction @Reload => m_Wrapper.m_General_Reload;
        public InputAction @Change => m_Wrapper.m_General_Change;
        public InputAction @Fire => m_Wrapper.m_General_Fire;
        public InputAction @Construct => m_Wrapper.m_General_Construct;
        public InputAction @UseItem => m_Wrapper.m_General_UseItem;
        public InputActionMap Get() { return m_Wrapper.m_General; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GeneralActions set) { return set.Get(); }
        public void SetCallbacks(IGeneralActions instance)
        {
            if (m_Wrapper.m_GeneralActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_GeneralActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_GeneralActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_GeneralActionsCallbackInterface.OnMove;
                @Run.started -= m_Wrapper.m_GeneralActionsCallbackInterface.OnRun;
                @Run.performed -= m_Wrapper.m_GeneralActionsCallbackInterface.OnRun;
                @Run.canceled -= m_Wrapper.m_GeneralActionsCallbackInterface.OnRun;
                @Focus.started -= m_Wrapper.m_GeneralActionsCallbackInterface.OnFocus;
                @Focus.performed -= m_Wrapper.m_GeneralActionsCallbackInterface.OnFocus;
                @Focus.canceled -= m_Wrapper.m_GeneralActionsCallbackInterface.OnFocus;
                @Reload.started -= m_Wrapper.m_GeneralActionsCallbackInterface.OnReload;
                @Reload.performed -= m_Wrapper.m_GeneralActionsCallbackInterface.OnReload;
                @Reload.canceled -= m_Wrapper.m_GeneralActionsCallbackInterface.OnReload;
                @Change.started -= m_Wrapper.m_GeneralActionsCallbackInterface.OnChange;
                @Change.performed -= m_Wrapper.m_GeneralActionsCallbackInterface.OnChange;
                @Change.canceled -= m_Wrapper.m_GeneralActionsCallbackInterface.OnChange;
                @Fire.started -= m_Wrapper.m_GeneralActionsCallbackInterface.OnFire;
                @Fire.performed -= m_Wrapper.m_GeneralActionsCallbackInterface.OnFire;
                @Fire.canceled -= m_Wrapper.m_GeneralActionsCallbackInterface.OnFire;
                @Construct.started -= m_Wrapper.m_GeneralActionsCallbackInterface.OnConstruct;
                @Construct.performed -= m_Wrapper.m_GeneralActionsCallbackInterface.OnConstruct;
                @Construct.canceled -= m_Wrapper.m_GeneralActionsCallbackInterface.OnConstruct;
                @UseItem.started -= m_Wrapper.m_GeneralActionsCallbackInterface.OnUseItem;
                @UseItem.performed -= m_Wrapper.m_GeneralActionsCallbackInterface.OnUseItem;
                @UseItem.canceled -= m_Wrapper.m_GeneralActionsCallbackInterface.OnUseItem;
            }
            m_Wrapper.m_GeneralActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Run.started += instance.OnRun;
                @Run.performed += instance.OnRun;
                @Run.canceled += instance.OnRun;
                @Focus.started += instance.OnFocus;
                @Focus.performed += instance.OnFocus;
                @Focus.canceled += instance.OnFocus;
                @Reload.started += instance.OnReload;
                @Reload.performed += instance.OnReload;
                @Reload.canceled += instance.OnReload;
                @Change.started += instance.OnChange;
                @Change.performed += instance.OnChange;
                @Change.canceled += instance.OnChange;
                @Fire.started += instance.OnFire;
                @Fire.performed += instance.OnFire;
                @Fire.canceled += instance.OnFire;
                @Construct.started += instance.OnConstruct;
                @Construct.performed += instance.OnConstruct;
                @Construct.canceled += instance.OnConstruct;
                @UseItem.started += instance.OnUseItem;
                @UseItem.performed += instance.OnUseItem;
                @UseItem.canceled += instance.OnUseItem;
            }
        }
    }
    public GeneralActions @General => new GeneralActions(this);

    // GUI
    private readonly InputActionMap m_GUI;
    private IGUIActions m_GUIActionsCallbackInterface;
    private readonly InputAction m_GUI_Invent;
    private readonly InputAction m_GUI_Pause;
    private readonly InputAction m_GUI_Build;
    private readonly InputAction m_GUI_Interact;
    public struct GUIActions
    {
        private @PlayerInputActions m_Wrapper;
        public GUIActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Invent => m_Wrapper.m_GUI_Invent;
        public InputAction @Pause => m_Wrapper.m_GUI_Pause;
        public InputAction @Build => m_Wrapper.m_GUI_Build;
        public InputAction @Interact => m_Wrapper.m_GUI_Interact;
        public InputActionMap Get() { return m_Wrapper.m_GUI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GUIActions set) { return set.Get(); }
        public void SetCallbacks(IGUIActions instance)
        {
            if (m_Wrapper.m_GUIActionsCallbackInterface != null)
            {
                @Invent.started -= m_Wrapper.m_GUIActionsCallbackInterface.OnInvent;
                @Invent.performed -= m_Wrapper.m_GUIActionsCallbackInterface.OnInvent;
                @Invent.canceled -= m_Wrapper.m_GUIActionsCallbackInterface.OnInvent;
                @Pause.started -= m_Wrapper.m_GUIActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_GUIActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_GUIActionsCallbackInterface.OnPause;
                @Build.started -= m_Wrapper.m_GUIActionsCallbackInterface.OnBuild;
                @Build.performed -= m_Wrapper.m_GUIActionsCallbackInterface.OnBuild;
                @Build.canceled -= m_Wrapper.m_GUIActionsCallbackInterface.OnBuild;
                @Interact.started -= m_Wrapper.m_GUIActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_GUIActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_GUIActionsCallbackInterface.OnInteract;
            }
            m_Wrapper.m_GUIActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Invent.started += instance.OnInvent;
                @Invent.performed += instance.OnInvent;
                @Invent.canceled += instance.OnInvent;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
                @Build.started += instance.OnBuild;
                @Build.performed += instance.OnBuild;
                @Build.canceled += instance.OnBuild;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
            }
        }
    }
    public GUIActions @GUI => new GUIActions(this);

    // Blueprint
    private readonly InputActionMap m_Blueprint;
    private IBlueprintActions m_BlueprintActionsCallbackInterface;
    private readonly InputAction m_Blueprint_Move;
    private readonly InputAction m_Blueprint_Place;
    private readonly InputAction m_Blueprint_Rotate;
    private readonly InputAction m_Blueprint_Exit;
    public struct BlueprintActions
    {
        private @PlayerInputActions m_Wrapper;
        public BlueprintActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Blueprint_Move;
        public InputAction @Place => m_Wrapper.m_Blueprint_Place;
        public InputAction @Rotate => m_Wrapper.m_Blueprint_Rotate;
        public InputAction @Exit => m_Wrapper.m_Blueprint_Exit;
        public InputActionMap Get() { return m_Wrapper.m_Blueprint; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BlueprintActions set) { return set.Get(); }
        public void SetCallbacks(IBlueprintActions instance)
        {
            if (m_Wrapper.m_BlueprintActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_BlueprintActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_BlueprintActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_BlueprintActionsCallbackInterface.OnMove;
                @Place.started -= m_Wrapper.m_BlueprintActionsCallbackInterface.OnPlace;
                @Place.performed -= m_Wrapper.m_BlueprintActionsCallbackInterface.OnPlace;
                @Place.canceled -= m_Wrapper.m_BlueprintActionsCallbackInterface.OnPlace;
                @Rotate.started -= m_Wrapper.m_BlueprintActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_BlueprintActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_BlueprintActionsCallbackInterface.OnRotate;
                @Exit.started -= m_Wrapper.m_BlueprintActionsCallbackInterface.OnExit;
                @Exit.performed -= m_Wrapper.m_BlueprintActionsCallbackInterface.OnExit;
                @Exit.canceled -= m_Wrapper.m_BlueprintActionsCallbackInterface.OnExit;
            }
            m_Wrapper.m_BlueprintActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Place.started += instance.OnPlace;
                @Place.performed += instance.OnPlace;
                @Place.canceled += instance.OnPlace;
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
                @Exit.started += instance.OnExit;
                @Exit.performed += instance.OnExit;
                @Exit.canceled += instance.OnExit;
            }
        }
    }
    public BlueprintActions @Blueprint => new BlueprintActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IGeneralActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnFocus(InputAction.CallbackContext context);
        void OnReload(InputAction.CallbackContext context);
        void OnChange(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnConstruct(InputAction.CallbackContext context);
        void OnUseItem(InputAction.CallbackContext context);
    }
    public interface IGUIActions
    {
        void OnInvent(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnBuild(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
    public interface IBlueprintActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnPlace(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnExit(InputAction.CallbackContext context);
    }
}
